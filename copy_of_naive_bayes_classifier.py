# -*- coding: utf-8 -*-
"""Copy of Naive Bayes Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12GaohubYn3T5rpHxZc7BIH8v_zph7k2C
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns; sns.set()

from google.colab import drive
drive.mount('/content/drive')

#Load the necessary python libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use('ggplot')

message = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/full stack data science specialization/Module 4 (machine learning)/GaussianNaive Bayes/spam.csv', encoding='latin-1')[['v1', 'v2']]
message.columns = ['label', 'message']
message.head()

message.shape

message['label'].value_counts()

message.groupby('label').describe()

message['length'] = message['message'].apply(lambda x : len(x))

message.head()

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
# %matplotlib inline

sns.histplot(message['length'])

import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
sw = stopwords.words('english')

len(message['message'].iloc[0])

def removestopwords(text):
  text = [word.lower() for word in text.split() if word.lower() not in sw]
  return " ".join(text)

message['message'] = message['message'].apply(removestopwords)

len(message['message'].iloc[0])

import string
punc = string.punctuation

def removepunc(text):
  text = [word.lower() for word in text.split() if word.lower() not in punc]
  return " ".join(text)

message['message'] = message['message'].apply(removepunc)

message.head()

message['length_after'] = message['message'].apply(lambda x : len(x))

message.head()

message['label'] = message['label'].apply(lambda x : 1 if x=='spam' else 0)

from sklearn.feature_extraction.text import CountVectorizer

countvectorizer = CountVectorizer()
X = countvectorizer.fit_transform(message['message'])

len(countvectorizer.get_feature_names_out())

X.toarray().shape

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(message['message'],message['label'],test_size=0.33,random_state=42)

X_train = countvectorizer.transform(X_train)
X_test = countvectorizer.transform(X_test)

X_train = X_train.toarray()
X_test = X_test.toarray()

from sklearn.naive_bayes import GaussianNB

gnb = GaussianNB()
gnb.fit(X_train,y_train)

from matplotlib.colors import XKCD_COLORS
y_pred_tr = gnb.predict(X_train)
y_pred_te = gnb.predict(X_test)

from sklearn.metrics import confusion_matrix

confusion_matrix(y_train,y_pred_tr)

from sklearn.metrics import classification_report

print(classification_report(y_train,y_pred_tr))

confusion_matrix(y_test,y_pred_te)

print(classification_report(y_test,y_pred_te))